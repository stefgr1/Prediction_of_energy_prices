# %% Import the yearly files of the wind data from the data folder
import os
import pandas as pd
from pathlib import Path
import yaml
from data.EEX_stock.data_utils import merge_data_frames, save_data_frame
from datetime import datetime, timedelta
from data.config_loader import load_config

# %%
# Import the yearly files of the wind data from the data folder from 2006 to 2024
home_directory = Path(os.path.expanduser('~')) / 'Documents' / \
    'Masterarbeit' / 'Prediction_of_energy_prices'
os.chdir(home_directory)

# Load configuration
config = load_config()

# %%


def load_data(year, path):
    """
    Load the wind data for a given year and clean it.
    """
    # Ensure path is a Path object
    path = Path(path)

    # Load the data
    file_path = path / f"temp_data_{year}.csv"
    df = pd.read_csv(file_path)

    # Implement any cleaning steps here

    return df


# %%
years = range(2006, 2025)
dataframes = [load_data(
    year, config["data"]["temp_input"]) for year in years]

# %%
df_merged = merge_data_frames(dataframes)

# %%
# Drop NAs
df_merged.dropna(inplace=True)

# Rename the 'Datum' column to 'Month' and the value column to Temp and the y column to "hour of the day"
df_merged.rename(columns={'Datum': 'Month', 'value': 'Temp',
                 'y': 'hour of the day'}, inplace=True)


# %%
df = df_merged.copy()

# %%
# Mapping German month names to English for datetime conversion
month_mapping = {
    'Januar': 'January',
    'Februar': 'February',
    'MÃ¤rz': 'March',
    'April': 'April',
    'Mai': 'May',
    'Juni': 'June',
    'Juli': 'July',
    'August': 'August',
    'September': 'September',
    'Oktober': 'October',
    'November': 'November',
    'Dezember': 'December'
}

# Apply month mapping to convert German month names to English
df['Month'] = df['Month'].map(month_mapping)

# Calculate total number of days from the start
total_days = len(df) // 24

# Generate a datetime index starting from January 1, 2006
start_date = datetime(2006, 1, 1)
date_range = pd.date_range(start=start_date, periods=total_days, freq='D')

# Assign each row in the DataFrame to its corresponding date
df['Date'] = date_range.repeat(24)

# Group by the new 'Date' column and calculate the mean wind speed for each day
daily_average_temp = df.groupby(
    'Date')['Temp'].mean().reset_index(name='AverageTemperature')

# round all values to 2 decimal places
daily_average_temp = daily_average_temp.round(2)

print(daily_average_temp)

# %% Save the daily wind data
output_file_name = f"temp_data_daily_{years[0]}_{years[-1]}.csv"
output_path = Path(config["data"]["temp_output"]) / output_file_name
save_data_frame(daily_average_temp, output_path)
# %%
